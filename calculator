<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Procesador de Rutas</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/geolib@3.3.3/dist/geolib.min.js"></script>
  <style>
    body { font-family: sans-serif; padding: 20px; background: #f0f0f0; }
    .log { white-space: pre-line; background: #fff; padding: 10px; border: 1px solid #ccc; max-height: 300px; overflow-y: auto; margin-top: 10px; }
  </style>
</head>
<body>
  <h2>Procesador de rutas (versi√≥n Web)</h2>
  <input type="file" id="fileInput" accept=".txt"><br><br>
  <button onclick="iniciarProceso()">Procesar rutas</button>
  <div class="log" id="log"></div>
  <br>
  <a id="descargarTxt" download="resultados.txt" style="display:none">Descargar resultados.txt</a><br>
  <a id="descargarKml" download="rutas.kml" style="display:none">Descargar rutas.kml</a>

  <script>
    const API_KEYS = [
      "5b3ce3597851110001cf6248dbe91b2e42cc404689369cb6617cb984",
      "5b3ce3597851110001cf624813d7251191f74945a7007d29eeca0755",
      "5b3ce3597851110001cf624868f351b4727b404082d8ba4a9f721813",
      "5b3ce3597851110001cf6248d469ecf28092442d8c234b04b7f8516f",
      "5b3ce3597851110001cf624860cf0f4d764340b89c1874e99fe8a4d0",
      "5b3ce3597851110001cf624842b0386351b7442aaada49cd850b37e1",
      "5b3ce3597851110001cf6248d1a9ee06cc2243ebaee5245f1248e65d",
      "5b3ce3597851110001cf62482f9dde100fbf44ac8f876b4c9ce772a8"
    ];

    const THRESHOLD_M = 50;
    let rutas = [];
    let resultados = [];
    let kmlPlacemarks = [];

    function log(text) {
      document.getElementById("log").textContent += text + "\n";
    }

    function leerArchivo(file) {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const lines = e.target.result.split(/\r?\n/);
          const parsed = lines.map(line => {
            const parts = line.trim().split(/\s+/);
            if (parts.length === 5) {
              return { name: parts[0], lat1: parseFloat(parts[1]), lon1: parseFloat(parts[2]), lat2: parseFloat(parts[3]), lon2: parseFloat(parts[4]) };
            }
          }).filter(Boolean);
          resolve(parsed);
        };
        reader.readAsText(file);
      });
    }

    async function procesarRuta(ruta, keyIndex) {
      const key = API_KEYS[keyIndex % API_KEYS.length];
      const url = `https://api.openrouteservice.org/v2/directions/foot-walking/geojson`;
      const body = {
        coordinates: [[ruta.lon1, ruta.lat1], [ruta.lon2, ruta.lat2]],
        preference: "shortest"
      };

      try {
        const res = await fetch(url, {
          method: "POST",
          headers: {
            "Authorization": key,
            "Content-Type": "application/json"
          },
          body: JSON.stringify(body)
        });

        if (!res.ok) throw { code: res.status };
        const data = await res.json();
        const coords = data.features[0].geometry.coordinates;
        const dist = data.features[0].properties.summary.distance;

        const dStart = geolib.getDistance({ latitude: ruta.lat1, longitude: ruta.lon1 }, { latitude: coords[0][1], longitude: coords[0][0] });
        const dEnd = geolib.getDistance({ latitude: ruta.lat2, longitude: ruta.lon2 }, { latitude: coords[coords.length - 1][1], longitude: coords[coords.length - 1][0] });

        if (dStart > THRESHOLD_M || dEnd > THRESHOLD_M) {
          resultados.push(`${ruta.name}: ${dist.toFixed(2)} m, Check carefully`);
        } else {
          resultados.push(`${ruta.name}: ${dist.toFixed(2)} m`);
          const coordStr = coords.map(c => `${c[0]},${c[1]},0`).join(" ");
          kmlPlacemarks.push(`<Placemark><name>${ruta.name}</name><LineString><tessellate>1</tessellate><coordinates>${coordStr}</coordinates></LineString></Placemark>`);
        }
        return keyIndex;

      } catch (err) {
        if (err.code === 403 || err.code === 429) {
          return keyIndex + 1; // cambiar clave
        } else {
          resultados.push(`${ruta.name}: -, Revisar manual (Error inesperado)`);
          return keyIndex;
        }
      }
    }

    async function iniciarProceso() {
      const file = document.getElementById("fileInput").files[0];
      if (!file) return alert("Primero selecciona un archivo .txt");
      rutas = await leerArchivo(file);
      resultados = [];
      kmlPlacemarks = [];
      document.getElementById("log").textContent = "Calculando rutas...\n";

      let keyIndex = 0;
      for (let i = 0; i < rutas.length; i++) {
        keyIndex = await procesarRuta(rutas[i], keyIndex);
        log(`[${i + 1}/${rutas.length}] ${rutas[i].name}`);
        await new Promise(r => setTimeout(r, 200)); // para evitar rate limit
      }

      generarArchivos();
    }

    function generarArchivos() {
      const txtBlob = new Blob([resultados.join("\n")], { type: "text/plain" });
      const kmlHeader = `<?xml version="1.0" encoding="UTF-8"?>\n<kml xmlns="http://www.opengis.net/kml/2.2"><Document>`;
      const kmlFooter = `</Document></kml>`;
      const kmlBlob = new Blob([kmlHeader + kmlPlacemarks.join("\n") + kmlFooter], { type: "application/vnd.google-earth.kml+xml" });

      const txtURL = URL.createObjectURL(txtBlob);
      const kmlURL = URL.createObjectURL(kmlBlob);

      const linkTxt = document.getElementById("descargarTxt");
      const linkKml = document.getElementById("descargarKml");
      linkTxt.href = txtURL;
      linkKml.href = kmlURL;
      linkTxt.style.display = "inline";
      linkKml.style.display = "inline";
      log("\nProceso completado. Archivos listos para descarga.");
    }
  </script>
</body>
</html>
